// Generated by CoffeeScript 1.4.0
(function() {
  var Program, Url, fs, program,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  program = require('commander');

  Url = require('./Url').Url;

  Program = (function() {

    function Program(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.run = __bind(this.run, this);

      this.runServer = __bind(this.runServer, this);

      this.runClient = __bind(this.runClient, this);

      this.initSIOServer = __bind(this.initSIOServer, this);

      this.initWSServer = __bind(this.initWSServer, this);

      this.initSIOClient = __bind(this.initSIOClient, this);

      this.initWSClient = __bind(this.initWSClient, this);

      this.initShell = __bind(this.initShell, this);

      this.parseOptions = __bind(this.parseOptions, this);

      if ((_ref = (_base = this.options).name) == null) {
        _base.name = 'wscat';
      }
      this.initCommander();
      return this;
    }

    Program.prototype.initCommander = function() {
      program.name = this.options.name;
      return program.version(Program.getVersion()).usage('[options] URL').option('-v, --verbose', 'verbose').option('-l, --listen', 'Start in listen mode, creating a server').option('-p, --local-port <port>', 'Specify local port for remote conntects', parseInt).option('--socketio', 'Use socket.io').option('-k, --keep-listen', 'Keep inbound sockets open for multiple connects');
    };

    Program.getVersion = function() {
      return JSON.parse(fs.readFileSync("" + __dirname + "/../package.json", 'utf8')).version;
    };

    Program.prototype.parseOptions = function() {
      program.parse(process.argv);
      return __extends(this.options, program);
    };

    Program.prototype.initShell = function() {
      var Shell;
      Shell = require('./Shell').Shell;
      this.shell = new Shell;
      return this.shell.start();
    };

    Program.prototype.initWSClient = function(destString) {
      var WSClient, dest;
      WSClient = require('./WSClient').WSClient;
      dest = new Url(destString);
      this.client = new WSClient(dest, this.options);
      return this.client.start();
    };

    Program.prototype.initSIOClient = function(destString) {
      var SIOClient, dest;
      SIOClient = require('./SIOClient').SIOClient;
      dest = new Url(destString);
      this.client = new SIOClient(dest, this.options);
      return this.client.start();
    };

    Program.prototype.initWSServer = function() {
      var WSServer;
      WSServer = require('./WSServer').WSServer;
      this.server = new WSServer(this.options);
      return this.server.start();
    };

    Program.prototype.initSIOServer = function() {
      var SIOServer;
      SIOServer = require('./SIOServer').SIOServer;
      this.server = new SIOServer(this.options);
      return this.server.start();
    };

    Program.prototype.runClient = function(destString) {
      var _this = this;
      this.initShell();
      if (this.options.socketio) {
        this.initSIOClient(destString);
      } else {
        this.initWSClient(destString);
      }
      this.shell.on('line', function(d) {
        return _this.client.send(d);
      });
      this.client.on('error', function(err) {
        console.log('client.on error');
        return _this.shell.exit(0);
      });
      this.client.on('data', function(d) {
        _this.shell.stdin.pause();
        _this.shell.send(d);
        return _this.shell.stdin.resume();
      });
      this.client.on('message', function(d) {
        return _this.shell.send(d);
      });
      this.client.on('close', function() {
        console.log('client.on close');
        _this.shell.stdin.pause();
        _this.shell.send("\nconnection closed by foreign host.");
        _this.shell.close();
        return _this.shell.exit(0);
      });
      this.client.on('open', function() {
        return _this.shell.send("Connection to " + destString + " succeeded!");
      });
      return this.shell.on('SIGINT', function() {
        console.log('shell.on SIGINT');
        _this.shell.stdin.pause();
        _this.shell.send("\nending session");
        _this.shell.close();
        _this.client.end();
        return _this.shell.exit(0);
      });
    };

    Program.prototype.runServer = function() {
      var _this = this;
      this.initShell();
      if (this.options.socketio) {
        this.initSIOServer();
      } else {
        this.initWSServer();
      }
      this.shell.on('line', function(d) {
        return _this.server.send(d);
      });
      this.server.on('error', function(err) {
        console.log('server.on error');
        return _this.shell.exit(0);
      });
      this.server.on('message', function(d) {
        return _this.shell.send(d);
      });
      this.server.on('connection', function() {
        return console.log('New connection');
      });
      this.server.on('close', function() {
        _this.shell.stdin.pause();
        _this.shell.send("\nconnection closed by foreign host.");
        if (!_this.options.keepListen) {
          _this.shell.close();
          return _this.shell.exit(0);
        }
      });
      return this.shell.on('SIGINT', function() {
        console.log('shell.on SIGINT');
        _this.shell.stdin.pause();
        _this.shell.send("\nending session");
        _this.shell.close();
        _this.server.end();
        return _this.shell.exit(0);
      });
    };

    Program.prototype.run = function() {
      var _ref;
      this.parseOptions();
      if (((_ref = this.options.args) != null ? _ref.length : void 0) === 1) {
        return this.runClient(this.options.args[0]);
      } else if (this.options.listen) {
        return this.runServer();
      } else {
        return program.help();
      }
    };

    Program.create = function(options) {
      if (options == null) {
        options = {};
      }
      return new Program(options);
    };

    Program.run = function() {
      var prog;
      prog = Program.create();
      return prog.run();
    };

    return Program;

  })();

  module.exports = {
    Program: Program,
    create: Program.create,
    run: Program.run
  };

}).call(this);
