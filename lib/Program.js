// Generated by CoffeeScript 1.4.0
(function() {
  var Program, Url, fs, program,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  program = require('commander');

  Url = require('./Url').Url;

  Program = (function() {

    function Program(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.run = __bind(this.run, this);

      this.runServer = __bind(this.runServer, this);

      this.runClient = __bind(this.runClient, this);

      this.initServer = __bind(this.initServer, this);

      this.initClient = __bind(this.initClient, this);

      this.initShell = __bind(this.initShell, this);

      this.parseOptions = __bind(this.parseOptions, this);

      if ((_ref = (_base = this.options).name) == null) {
        _base.name = 'wscat';
      }
      this.initCommander();
      return this;
    }

    Program.prototype.initCommander = function() {
      program.name = this.options.name;
      return program.version(Program.getVersion()).usage('[options] URL').option('-v, --verbose', 'verbose').option('-l, --listen', 'Start in listen mode, creating a server');
    };

    Program.getVersion = function() {
      return JSON.parse(fs.readFileSync("" + __dirname + "/../package.json", 'utf8')).version;
    };

    Program.prototype.parseOptions = function() {
      program.parse(process.argv);
      return __extends(this.options, program);
    };

    Program.prototype.initShell = function() {
      var Shell;
      Shell = require('./Shell').Shell;
      return this.shell = new Shell;
    };

    Program.prototype.initClient = function(destString) {
      var Client, dest;
      Client = require('./Client').Client;
      dest = Url(destString);
      return this.client = new Client(dest);
    };

    Program.prototype.initServer = function() {
      var Server;
      Server = require('./Server').Server;
      return this.server = new Server;
    };

    Program.prototype.runClient = function(destString) {
      this.initShell();
      return this.initClient(destString);
    };

    Program.prototype.runServer = function() {
      this.initShell();
      return this.initServer();
    };

    Program.prototype.run = function() {
      var _ref;
      this.parseOptions();
      if (((_ref = this.options.args) != null ? _ref.length : void 0) === 1) {
        return this.runClient(this.options.args[0]);
      } else if (this.options.listen) {
        return this.runServer;
      } else {
        return program.help();
      }
    };

    Program.create = function(options) {
      if (options == null) {
        options = {};
      }
      return new Program(options);
    };

    Program.run = function() {
      var prog;
      prog = Program.create();
      return prog.run();
    };

    return Program;

  })();

  module.exports = {
    Program: Program,
    create: Program.create,
    run: Program.run
  };

}).call(this);
