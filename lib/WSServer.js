// Generated by CoffeeScript 1.4.0
(function() {
  var Base, WSServer, ws,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./Base').Base;

  ws = require('ws');

  WSServer = (function(_super) {

    __extends(WSServer, _super);

    function WSServer(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.onClientMessage = __bind(this.onClientMessage, this);

      this.onClientError = __bind(this.onClientError, this);

      this.onClientClose = __bind(this.onClientClose, this);

      this.onClientOpen = __bind(this.onClientOpen, this);

      this.onClientConnect = __bind(this.onClientConnect, this);

      this.onWSServerError = __bind(this.onWSServerError, this);

      this.onWSServerConnection = __bind(this.onWSServerConnection, this);

      this.onWSServerListening = __bind(this.onWSServerListening, this);

      this.end = __bind(this.end, this);

      this.send = __bind(this.send, this);

      this._enqueue = __bind(this._enqueue, this);

      this.isActive = __bind(this.isActive, this);

      this.start = __bind(this.start, this);

      this.log('constructor');
      this._queue = [];
      if ((_ref = (_base = this.options).port) == null) {
        _base.port = this.options.localPort;
      }
      return this;
    }

    WSServer.prototype.start = function() {
      this.log('start');
      this.wss = new ws.Server(this.options);
      this.wss.on('listening', this.onWSServerListening);
      this.wss.on('connection', this.onWSServerConnection);
      return this.wss.on('error', this.onWSServerError);
    };

    WSServer.prototype.isActive = function() {
      return (this.wss != null) && (this.ws != null) && this.ready;
    };

    WSServer.prototype._enqueue = function(data) {
      return this._queue.push(data);
    };

    WSServer.prototype.send = function(data) {
      if (!this.isActive()) {
        return this._enqueue(data);
      } else {
        this.log('send', data);
        return this.ws.send(data);
      }
    };

    WSServer.prototype.end = function(fn) {
      if (fn == null) {
        fn = null;
      }
      this.log('end');
      if (this.isActive()) {
        this.ws.close();
      }
      this.wss = null;
      this.ws = null;
      this.ready = false;
      if (fn) {
        return fn();
      }
    };

    WSServer.prototype.onWSServerListening = function() {
      this.log('onWSServerListening');
      return this.emit('listening');
    };

    WSServer.prototype.onWSServerConnection = function(socket) {
      var data, _i, _len, _ref, _results;
      this.log('onWSServerConnection');
      this.emit('connection');
      this.ws = socket;
      this.ws.on('open', this.onClientOpen);
      this.ws.on('close', this.onClientClose);
      this.ws.on('error', this.onClientError);
      this.ws.on('message', this.onClientMessage);
      this.ws.on('connect', this.onClientConnect);
      this.ready = true;
      _ref = this._queue;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        _results.push(this.send(data));
      }
      return _results;
    };

    WSServer.prototype.onWSServerError = function(err) {
      this.log('onWSServerError', err);
      return this.emit('error', err);
    };

    WSServer.prototype.onClientConnect = function() {
      this.log('onClientConnect');
      return this.emit('connect');
    };

    WSServer.prototype.onClientOpen = function() {
      this.log('onClientOpen');
      return this.emit('open');
    };

    WSServer.prototype.onClientClose = function() {
      this.log('onClientClose');
      return this.emit('close');
    };

    WSServer.prototype.onClientError = function(err) {
      this.log('onClientError', err);
      return this.emit('error', err);
    };

    WSServer.prototype.onClientMessage = function(msg) {
      this.log('onClientMessage', msg);
      return this.emit('message', msg);
    };

    return WSServer;

  })(Base);

  module.exports = {
    WSServer: WSServer
  };

}).call(this);
