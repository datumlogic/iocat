// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Shell, readline,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  readline = require('readline');

  Shell = (function(_super) {

    __extends(Shell, _super);

    function Shell(options) {
      var _base, _base1, _ref, _ref1;
      this.options = options != null ? options : {};
      this.close = __bind(this.close, this);

      this.write = __bind(this.write, this);

      this.exit = __bind(this.exit, this);

      this.onSigint = __bind(this.onSigint, this);

      this.onLine = __bind(this.onLine, this);

      this.start = __bind(this.start, this);

      if ((_ref = (_base = this.options).input) == null) {
        _base.input = process.stdin;
      }
      if ((_ref1 = (_base1 = this.options).output) == null) {
        _base1.output = process.stdout;
      }
      this.stdin = process.stdin;
      this.stdout = process.stdout;
      return this;
    }

    Shell.prototype.start = function() {
      this.rl = readline.createInterface(this.options);
      this.rl.on('line', this.onLine);
      return this.rl.on('SIGINT', this.onSigint);
    };

    Shell.prototype.onLine = function(d) {
      console.log('Shell.onLine', d);
      return this.emit('line', d);
    };

    Shell.prototype.onSigint = function() {
      console.log('Shell.onSigint');
      return this.emit('SIGINT');
    };

    Shell.prototype.exit = function(code) {
      console.log('Shell.exit:', code);
      return process.exit(code);
    };

    Shell.prototype.write = function(str) {
      return console.log('Shell.write', str);
    };

    Shell.prototype.close = function() {
      return console.log('Shell.close');
    };

    return Shell;

  })(EventEmitter);

  module.exports = {
    Shell: Shell
  };

}).call(this);
