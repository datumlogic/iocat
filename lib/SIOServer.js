// Generated by CoffeeScript 1.4.0
(function() {
  var Base, SIOServer, io,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./Base').Base;

  io = require('socket.io');

  SIOServer = (function(_super) {

    __extends(SIOServer, _super);

    function SIOServer(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.onClientMessage = __bind(this.onClientMessage, this);

      this.onClientError = __bind(this.onClientError, this);

      this.onClientClose = __bind(this.onClientClose, this);

      this.onClientOpen = __bind(this.onClientOpen, this);

      this.onClientDisonnect = __bind(this.onClientDisonnect, this);

      this.onClientConnect = __bind(this.onClientConnect, this);

      this.onSIOServerError = __bind(this.onSIOServerError, this);

      this.onSIOServerConnection = __bind(this.onSIOServerConnection, this);

      this.onSIOServerDisconnect = __bind(this.onSIOServerDisconnect, this);

      this.onSIOServerListening = __bind(this.onSIOServerListening, this);

      this.end = __bind(this.end, this);

      this.send = __bind(this.send, this);

      this.start = __bind(this.start, this);

      if ((_ref = (_base = this.options).port) == null) {
        _base.port = this.options.localPort;
      }
      this.options.log = !!this.options.verbose;
      this.log('SIOServer.constructor');
      return this;
    }

    SIOServer.prototype.start = function() {
      this.log('start');
      this.sio = io.listen(this.options.port, this.options);
      this.sio.set('log', false);
      this.sio.enable('browser client mignification');
      this.sio.enable('browser client etag');
      this.sio.enable('browser client gzip');
      this.sio.sockets.on('connection', this.onSIOServerConnection);
      return this.sio.sockets.on('error', this.onSIOServerError);
    };

    SIOServer.prototype.send = function(d) {
      this.log('send', d);
      return this.ioc.send(d);
    };

    SIOServer.prototype.end = function() {
      this.log('end');
      return this.ioc.disconnect();
    };

    SIOServer.prototype.onSIOServerListening = function() {
      this.log('onSIOServerListening');
      return this.emit('listening');
    };

    SIOServer.prototype.onSIOServerDisconnect = function() {
      this.log('onSIOServerDisconnect');
      return this.emit('disconnect');
    };

    SIOServer.prototype.onSIOServerConnection = function(ws) {
      this.log('onSIOServerConnection');
      this.emit('connection');
      this.ioc = ws;
      this.ioc.on('open', this.onClientOpen);
      this.ioc.on('close', this.onClientClose);
      this.ioc.on('error', this.onClientError);
      this.ioc.on('message', this.onClientMessage);
      this.ioc.on('connect', this.onClientConnect);
      return this.ioc.on('disconnect', this.onClientDisonnect);
    };

    SIOServer.prototype.onSIOServerError = function(err) {
      this.log('onSIOServerError', err);
      return this.emit('error', err);
    };

    SIOServer.prototype.onClientConnect = function() {
      this.log('onClientConnect');
      return this.emit('connect');
    };

    SIOServer.prototype.onClientDisonnect = function() {
      this.log('onClientDisonnect');
      return this.emit('disconnect');
    };

    SIOServer.prototype.onClientOpen = function() {
      this.log('onClientOpen');
      return this.emit('open');
    };

    SIOServer.prototype.onClientClose = function() {
      this.log('onClientClose');
      return this.emit('close');
    };

    SIOServer.prototype.onClientError = function(err) {
      this.log('onClientError', err);
      return this.emit('error', err);
    };

    SIOServer.prototype.onClientMessage = function(msg) {
      this.log('onClientMessage', msg);
      return this.emit('message', msg);
    };

    return SIOServer;

  })(Base);

  module.exports = {
    SIOServer: SIOServer
  };

}).call(this);
