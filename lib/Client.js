// Generated by CoffeeScript 1.4.0
(function() {
  var Base, Client, ws,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./Base').Base;

  ws = require('ws');

  Client = (function(_super) {

    __extends(Client, _super);

    function Client(url, options) {
      this.url = url;
      this.options = options != null ? options : {};
      this.onMessage = __bind(this.onMessage, this);

      this.onError = __bind(this.onError, this);

      this.onClose = __bind(this.onClose, this);

      this.onOpen = __bind(this.onOpen, this);

      this.onConnect = __bind(this.onConnect, this);

      this.end = __bind(this.end, this);

      this.send = __bind(this.send, this);

      this.start = __bind(this.start, this);

      return this;
    }

    Client.prototype.start = function() {
      var href;
      this.log('Client: url->', this.url.format());
      href = this.url.format();
      this.ws = new ws(this.url.format());
      this.ws.on('open', this.onOpen);
      this.ws.on('close', this.onClose);
      this.ws.on('error', this.onError);
      this.ws.on('message', this.onMessage);
      return this.ws.on('connect', this.onConnect);
    };

    Client.prototype.send = function(d) {
      this.log('Client.send', d);
      return this.ws.send(d);
    };

    Client.prototype.end = function() {
      this.log('Client.end');
      return this.ws.close();
    };

    Client.prototype.onConnect = function() {
      this.log('Client.onConnect');
      return this.emit('connect');
    };

    Client.prototype.onOpen = function() {
      this.log('Client.onOpen');
      return this.emit('open');
    };

    Client.prototype.onClose = function() {
      this.log('Client.onClose');
      return this.emit('close');
    };

    Client.prototype.onError = function(err) {
      this.log('Client.onError', err);
      return this.emit('error', err);
    };

    Client.prototype.onMessage = function(msg) {
      this.log('Client.onMessage', msg);
      return this.emit('message', msg);
    };

    return Client;

  })(Base);

  module.exports = {
    Client: Client
  };

}).call(this);
