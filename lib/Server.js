// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Server, ws,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  ws = require('ws');

  Server = (function(_super) {

    __extends(Server, _super);

    function Server(options) {
      var _base, _ref;
      this.options = options != null ? options : {};
      this.onClientMessage = __bind(this.onClientMessage, this);

      this.onClientError = __bind(this.onClientError, this);

      this.onClientClose = __bind(this.onClientClose, this);

      this.onClientOpen = __bind(this.onClientOpen, this);

      this.onClientConnect = __bind(this.onClientConnect, this);

      this.onServerError = __bind(this.onServerError, this);

      this.onServerConnection = __bind(this.onServerConnection, this);

      this.onServerListening = __bind(this.onServerListening, this);

      this.start = __bind(this.start, this);

      if ((_ref = (_base = this.options).port) == null) {
        _base.port = this.options.localPort;
      }
      return this;
    }

    Server.prototype.start = function() {
      this.wss = new ws.Server(this.options);
      this.wss.on('listening', this.onServerListening);
      this.wss.on('connection', this.onServerConnection);
      return this.wss.on('error', this.onServerError);
    };

    Server.prototype.onServerListening = function() {
      console.log('onListening');
      return this.emit('listening');
    };

    Server.prototype.onServerConnection = function(ws) {
      console.log('onConnection');
      this.emit('connection');
      this.ws = ws;
      this.ws.on('open', this.onClientOpen);
      this.ws.on('close', this.onClientClose);
      this.ws.on('error', this.onClientError);
      this.ws.on('message', this.onClientMessage);
      return this.ws.on('connect', this.onClientConnect);
    };

    Server.prototype.onServerError = function(err) {
      console.log('onError', err);
      return this.emit('error', err);
    };

    Server.prototype.onClientConnect = function() {
      console.log('onConnect');
      return this.emit('connect');
    };

    Server.prototype.onClientOpen = function() {
      console.log('onOpen');
      return this.emit('open');
    };

    Server.prototype.onClientClose = function() {
      console.log('onClose');
      return this.emit('close');
    };

    Server.prototype.onClientError = function(err) {
      console.log('onError', err);
      return this.emit('error', err);
    };

    Server.prototype.onClientMessage = function(msg) {
      console.log('onMessage', msg);
      return this.emit('message', msg);
    };

    return Server;

  })(EventEmitter);

  module.exports = {
    Server: Server
  };

}).call(this);
